import socket
import sqlite3
import threading

# Configurazione del server
server_address = ('localhost', 12345)
BUFFER_SIZE = 4096

# Funzione per connettersi al database e caricare le operazioni
def load_operations():
    conn = sqlite3.connect('operations.db')
    cursor = conn.cursor()
    cursor.execute("SELECT client, operation FROM operations")
    operations = cursor.fetchall()
    conn.close()
    return operations

# Funzione che gestisce la connessione con il client
def handle_client(client_socket, client_address, operations):
    thread_id = threading.current_thread().name
    for operation in operations:
        client_id, operation_str = operation
        if client_id == int(thread_id):  # Invia solo le operazioni per il client corretto
            client_socket.send(operation_str.encode('utf-8'))
            result = client_socket.recv(BUFFER_SIZE).decode('utf-8')
            print(f"{operation_str} = {result} from {client_address[0]} - {client_address[1]}")
    
    client_socket.send("exit".encode('utf-8'))
    client_socket.close()

def main():
    operations = load_operations()
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(server_address)
    server_socket.listen(5)
    print("Server in ascolto...")

    try:
        while True:
            client_socket, client_address = server_socket.accept()
            thread = threading.Thread(target=handle_client, args=(client_socket, client_address, operations))
            thread.start()
    except KeyboardInterrupt:
        print("Server chiuso.")
    finally:
        server_socket.close()

if __name__ == "__main__":
    main()